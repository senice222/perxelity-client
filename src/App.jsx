import { useEffect, useState } from "react"
import "./App.css"
import ReactMarkdown from "react-markdown"
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter"
import { vscDarkPlus } from "react-syntax-highlighter/dist/esm/styles/prism"
import LZString from "lz-string"
import 'katex/dist/katex.min.css'
import remarkMath from 'remark-math'
import rehypeKatex from 'rehype-katex'

function ResponseViewer() {
  const [response, setResponse] = useState(null)
  const [loading, setLoading] = useState(true)
  const [copySuccess, setCopySuccess] = useState(false)
  const [showThinking, setShowThinking] = useState(true)
  const webApp = window.Telegram.WebApp

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const removeEscapes = (text) => {
    return text.replace(/\\([_*[\]()~`>#+=|{}.!-])/g, "$1")
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ thinking
  const extractThinking = (text) => {
    const thinkBlock = /<think>([\s\S]*?)<\/think>/;
    if (thinkBlock.test(text)) {
      const match = text.match(thinkBlock);
      if (match && match[1]) {
        return {
          content: match[1].trim(),
          textWithoutThinking: text.replace(thinkBlock, '')
        };
      }
    }
    return { content: '', textWithoutThinking: text };
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª
  const formatMathContent = (text) => {
    if (!text) return text;
    
    console.log("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", text);
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –≤—Å–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    // –ü–µ—Ä–µ–¥ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    let formatted = text;
    
    // –°–∞–º–æ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
    // 1. –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∏—Ä–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    formatted = formatted.replace(/^[-]\s*$/gm, "");
    
    // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (–¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –∑–Ω–∞–∫–∏ —Ä–∞–≤–Ω–æ)
    formatted = formatted.replace(/^[-=_]{2,}$/gm, "");
    formatted = formatted.replace(/^[-=_]\s[-=_]\s[-=_]$/gm, "");
    
    // 3. –£–¥–∞–ª—è–µ–º –ª–∏–Ω–∏–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–æ–∫—Ä—É–≥
    formatted = formatted.replace(/\n\s*[-=_]{2,}\s*\n/g, "\n");
    formatted = formatted.replace(/^\s*[-=_]{2,}\s*$/gm, "");
    
    // 4. –§–∏–∫—Å–∏—Ä—É–µ–º –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
    if (/^[-=_]{2,}/.test(formatted)) {
      formatted = formatted.replace(/^[-=_]{2,}(?:\s*\n)?/, "");
    }
    if (/[-=_]{2,}$/.test(formatted)) {
      formatted = formatted.replace(/(?:\n\s*)?[-=_]{2,}$/, "");
    }
    
    // 5. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—á–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
    formatted = formatted.replace(/^--+$/gm, "");
    formatted = formatted.replace(/^==+$/gm, "");
    formatted = formatted.replace(/^__+$/gm, "");
    formatted = formatted.replace(/^-[-\s]*-$/gm, "");
    formatted = formatted.replace(/^=[\s=]*=$/gm, "");
    formatted = formatted.replace(/^_[\s_]*_$/gm, "");
    
    // –û—á–∏—â–∞–µ–º –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    formatted = formatted.replace(/üß† (–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö–æ–¥–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)/g, "");
    formatted = formatted.replace(/\*–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\*\n\n/g, "");
    formatted = formatted.replace(/\*–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º—É–ª –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\*/g, "");
    formatted = formatted.replace(/–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:([^\n]*)\n\n/g, "");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    formatted = formatted.replace(/\\([_*[\]()~`>#+=|{}.!-])/g, "$1")
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    formatted = formatted.replace(/\\([_*[\]()~`>#+=|{}.!-])/g, "$1")
    
    // –û—á–∏—â–∞–µ–º –æ—Ç —Ü–≤–µ—Ç–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)
    formatted = formatted.replace(/<font color=['"]?red['"]?>(.*?)<\/font>/gi, '$1');
    formatted = formatted.replace(/<span style=['"]color:\s*red['"]>(.*?)<\/span>/gi, '$1');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    formatted = formatted.replace(/üß† (–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö–æ–¥–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)/g, "");
    formatted = formatted.replace(/\*–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\*\n\n/g, "");
    formatted = formatted.replace(/\*–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º—É–ª –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\*/g, "");
    formatted = formatted.replace(/–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:([^\n]*)\n\n/g, "");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    formatted = formatted.replace(/(?<!\$)–ö–æ—Ä–Ω–∏:\s*/g, "**–ö–æ—Ä–Ω–∏** ");
    formatted = formatted.replace(/(?<!\$)–∫–æ—Ä–Ω–∏:\s*/g, "**–ö–æ—Ä–Ω–∏** ");
    formatted = formatted.replace(/(?<!\$)–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç:\s*/g, "**–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç** ");
    formatted = formatted.replace(/(?<!\$)–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç:\s*/g, "**–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç** ");
    formatted = formatted.replace(/(?<!\$)–†–µ—à–µ–Ω–∏–µ:\s*/g, "**–†–µ—à–µ–Ω–∏–µ** ");
    formatted = formatted.replace(/(?<!\$)—Ä–µ—à–µ–Ω–∏–µ:\s*/g, "**–†–µ—à–µ–Ω–∏–µ** ");
    formatted = formatted.replace(/(?<!\$)–í—ã—á–∏—Å–ª–µ–Ω–∏–µ:\s*/g, "**–í—ã—á–∏—Å–ª–µ–Ω–∏–µ** ");
    formatted = formatted.replace(/(?<!\$)–í—ã—á–∏—Å–ª–µ–Ω–∏—è:\s*/g, "**–í—ã—á–∏—Å–ª–µ–Ω–∏—è** ");
    formatted = formatted.replace(/(?<!\$)–û—Ç–≤–µ—Ç:\s*/g, "**–û—Ç–≤–µ—Ç** ");
    formatted = formatted.replace(/(?<!\$)–æ—Ç–≤–µ—Ç:\s*/g, "**–û—Ç–≤–µ—Ç** ");
    formatted = formatted.replace(/(?<!\$)–ó–Ω–∞—á–µ–Ω–∏–µ:\s*/g, "**–ó–Ω–∞—á–µ–Ω–∏–µ** ");
    formatted = formatted.replace(/(?<!\$)–∑–Ω–∞—á–µ–Ω–∏–µ:\s*/g, "**–ó–Ω–∞—á–µ–Ω–∏–µ** ");
    formatted = formatted.replace(/(?<!\$)–ü–æ–¥—Å—Ç–∞–≤–∏–º:\s*/g, "**–ü–æ–¥—Å—Ç–∞–≤–∏–º** ");
    formatted = formatted.replace(/(?<!\$)–ø–æ–¥—Å—Ç–∞–≤–∏–º:\s*/g, "**–ü–æ–¥—Å—Ç–∞–≤–∏–º** ");
    formatted = formatted.replace(/(?<!\$)–†–µ—à–∞–µ–º:\s*/g, "**–†–µ—à–∞–µ–º** ");
    formatted = formatted.replace(/(?<!\$)—Ä–µ—à–∞–µ–º:\s*/g, "**–†–µ—à–∞–µ–º** ");
    formatted = formatted.replace(/(?<!\$)–ü—Ä–æ–≤–µ—Ä–∫–∞:\s*/g, "**–ü—Ä–æ–≤–µ—Ä–∫–∞** ");
    formatted = formatted.replace(/(?<!\$)–ø—Ä–æ–≤–µ—Ä–∫–∞:\s*/g, "**–ü—Ä–æ–≤–µ—Ä–∫–∞** ");
    formatted = formatted.replace(/(?<!\$)–†–µ–∑—É–ª—å—Ç–∞—Ç:\s*/g, "**–†–µ–∑—É–ª—å—Ç–∞—Ç** ");
    formatted = formatted.replace(/(?<!\$)—Ä–µ–∑—É–ª—å—Ç–∞—Ç:\s*/g, "**–†–µ–∑—É–ª—å—Ç–∞—Ç** ");
    formatted = formatted.replace(/(?<!\$)–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:\s*/g, "**–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ** ");
    formatted = formatted.replace(/(?<!\$)–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:\s*/g, "**–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ** ");
    formatted = formatted.replace(/(?<!\$)–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\s*/g, "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** ");
    formatted = formatted.replace(/(?<!\$)–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\s*/g, "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** ");
    formatted = formatted.replace(/(?<!\$)–®–∞–≥:\s*/g, "**–®–∞–≥** ");
    formatted = formatted.replace(/(?<!\$)—à–∞–≥:\s*/g, "**–®–∞–≥** ");
    formatted = formatted.replace(/(?<!\$)–®–∞–≥–∏:\s*/g, "**–®–∞–≥–∏** ");
    formatted = formatted.replace(/(?<!\$)—à–∞–≥–∏:\s*/g, "**–®–∞–≥–∏** ");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    formatted = formatted.replace(/^([–ê-–Ø–∞-—è–Å—ë\s]+):\s*/gm, "**$1** ");
    
    // –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    // –û–¥–∏–Ω–æ—á–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    formatted = formatted.replace(/^:\s*/gm, "");
    
    // –û–¥–∏–Ω–æ—á–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    formatted = formatted.replace(/(\*\*[^*]+\*\*)\s*\n\s*:/g, "$1\n");
    
    // –û–¥–∏–Ω–æ—á–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–æ—Å–ª–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    formatted = formatted.replace(/(\d+\.\s+[^\n]+)\n\s*:/g, "$1\n");
    
    // –£–¥–∞–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–æ—Å–ª–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    formatted = formatted.replace(/(‚Ä¢\s+[^\n]+)\n\s*:/g, "$1\n");
    
    // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    formatted = formatted.replace(/\n\s*:\s*\n/g, "\n\n");
    
    // –£–¥–∞–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è, –æ–∫–∞–∑–∞–≤—à–∏–µ—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    formatted = formatted.replace(/([^\n])\n\s*:\s*\n/g, "$1\n\n");
    
    // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
    // –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö
    const mathParts = [];
    let lastIdx = 0;
    const mathRegex = /\$(.*?)\$/g;
    let mathMatch;
    
    while ((mathMatch = mathRegex.exec(formatted)) !== null) {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ —Ñ–æ—Ä–º—É–ª—ã
      if (mathMatch.index > lastIdx) {
        mathParts.push({
          type: 'text',
          content: formatted.substring(lastIdx, mathMatch.index)
        });
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
      let formula = mathMatch[0];
      formula = formula.replace(/\*\*([^*]+)\*\*/g, "$1:"); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
      
      mathParts.push({
        type: 'math',
        content: formula
      });
      
      lastIdx = mathMatch.index + mathMatch[0].length;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if (lastIdx < formatted.length) {
      mathParts.push({
        type: 'text',
        content: formatted.substring(lastIdx)
      });
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ
    if (mathParts.length > 0) {
      formatted = mathParts.map(p => p.content).join('');
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∏ –º–∞—Ä–∫–µ—Ä—ã
    formatted = formatted.replace(/^\s*(\d+)[.)]?\s+/gm, "1. ");
    formatted = formatted.replace(/\n\n\s*(\d+)[.)]?\s+/g, "\n\n1. ");
    formatted = formatted.replace(/\n\s*-\s+/g, "\n‚Ä¢ ");
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö
    formatted = formatted.replace(/(\d\.\s+[^\n]+)\n\s+(?=\d\.\s+)/g, "$1\n");
    
    // –£–¥–∞–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –≤–∏–¥–µ —Ç–∏—Ä–µ (---)
    formatted = formatted.replace(/^-{3,}$/gm, "");
    formatted = formatted.replace(/^={3,}$/gm, "");
    formatted = formatted.replace(/^-\s*-\s*-\s*$/gm, "");
    formatted = formatted.replace(/\n\s*-{3,}\s*\n/g, "\n\n");
    formatted = formatted.replace(/\n\s*={3,}\s*\n/g, "\n\n");
    formatted = formatted.replace(/\n\s*-\s*-\s*-\s*\n/g, "\n\n");
    
    // –ì–õ–û–ë–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –î–í–û–ï–¢–û–ß–ò–ô
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
    const formulas = [];
    let tempFormatted = formatted;
    let formulaIndex = 0;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    tempFormatted = tempFormatted.replace(/\$([^$]*)\$/g, (match) => {
      formulas.push(match);
      return `__FORMULA_${formulaIndex++}__`;
    });
    
    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–≤–æ–µ—Ç–æ—á–∏—è (–æ–Ω–∏ —Ç–æ—á–Ω–æ –Ω–µ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö)
    
    // 1. –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ –æ–±—ã—á–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –Ω–∞ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    tempFormatted = tempFormatted.replace(/^([–ê-–Ø–∞-—è–Å—ë][^:\n]*?):\s*$/gm, "**$1**");
    
    // 2. –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    tempFormatted = tempFormatted.replace(/^:\s*$/gm, "");
    tempFormatted = tempFormatted.replace(/\n\s*:\s*(?=\n)/g, "\n");
    
    // 3. –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    tempFormatted = tempFormatted.replace(/\*\*([^*]+)\*\*\s*:/g, "**$1**");
    
    // 4. –£–¥–∞–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
    tempFormatted = tempFormatted.replace(/^(\d+\.\s+[^:\n]+):\s*$/gm, "$1");
    tempFormatted = tempFormatted.replace(/^(‚Ä¢\s+[^:\n]+):\s*$/gm, "$1");
    
    // 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –¥–æ–±–∞–≤–æ–∫ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    tempFormatted = tempFormatted.replace(/^(–û–≤–æ—â–∏|–ú—è—Å–æ|–î–æ–±–∞–≤–∫–∏|–°–æ—É—Å—ã|–ü—Ä–∏–ø—Ä–∞–≤—ã|–°—ã—Ä|–°–æ–≤–µ—Ç—ã|–í–∞—Ä–∏–∞–Ω—Ç—ã):\s*/gm, "**$1**\n");
    
    // 6. –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ
    tempFormatted = tempFormatted.replace(/(?:^|\n)\s*:\s*(?=\n|$)/g, "\n");
    
    // 7. –ó–∞–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–≤–æ–µ—Ç–æ—á–∏—è –Ω–∞ —Ç–æ—á–∫–∏ (–∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º—É–ª)
    tempFormatted = tempFormatted.replace(/([^_]):/g, "$1.");
    
    // –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
    for (let i = 0; i < formulas.length; i++) {
      tempFormatted = tempFormatted.replace(`__FORMULA_${i}__`, formulas[i]);
    }
    
    formatted = tempFormatted;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥—Ä—É–ø–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    formatted = formatted.replace(/(?:^|\n)(‚Ä¢\s+[^\n]+)(?:\n(‚Ä¢\s+[^\n]+))+/g, (match) => {
      return "\n" + match.trim().split("\n").map(item => item.trim()).join("\n");
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    formatted = formatted.replace(/(?:^|\n)(\d+\.\s+[^\n]+)(?:\n(\d+\.\s+[^\n]+))+/g, (match) => {
      return "\n" + match.trim().split("\n").map(item => item.trim()).join("\n");
    });
    
    // –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    formatted = formatted.replace(/^(–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã|–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏|–®–∞–≥–∏|–°–æ–≤–µ—Ç—ã|–î–æ–±–∞–≤–∫–∏|–í–∞—Ä–∏–∞–Ω—Ç—ã|–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ)$/gm, "**$1**");
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –¥–ª—è –∫–æ—Ä–Ω–µ–π
    formatted = formatted.replace(/–ö–æ—Ä–Ω–∏:/g, "**–ö–æ—Ä–Ω–∏:**");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Å –∫–æ—Ä–Ω—è–º–∏
    formatted = formatted.replace(/\(x\s*=\s*(-?[^)]+)\)\s+–∏\s+\(x\s*=\s*(-?[^)]+)\)/g, 
                              (m, root1, root2) => `$x_1 = ${root1}$ –∏ $x_2 = ${root2}$`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∫–æ—Ä–Ω—è–º–∏ (x = -\\frac{2}{5}) –∏ (x = 1/3)
    formatted = formatted.replace(/\(x\s*=\s*(-?\\frac\{[^}]+\}\{[^}]+\})\)/g, "$x = $1$");
    formatted = formatted.replace(/\(x\s*=\s*(-?[0-9]+\/[0-9]+)\)/g, "$x = $1$");
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞ 5x^2 - 3x - 2 = (5x + 2)(x - 1) –≤ LaTeX
    formatted = formatted.replace(/(\d+)x\^2/g, "$1x^2");
    formatted = formatted.replace(/(\d+)x\^(\d+)/g, "$1x^$2");
    formatted = formatted.replace(/(\d+)x(?!\^)/g, "$1x");
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ—Ä–Ω–µ–π –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
    formatted = formatted.replace(/\\frac\{(-?\d+)([+-]\\sqrt\{[^}]+\})\}\{([^}]+)\}/g, 
                              (match, num, sqrt, denom) => `\\frac{${num}${sqrt}}{${denom}}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ax^2 + bx + c = 0
    formatted = formatted.replace(/(\d+)x\^2\s*([+-])\s*(\d+)x\s*([+-])\s*(\d+)\s*=\s*0/g, 
                              (match, a, sign1, b, sign2, c) => `$${a}x^2 ${sign1} ${b}x ${sign2} ${c} = 0$`);
    
    // –í–ê–ñ–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ \cdot
    // 1. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–Ω—ã–µ \cdot\cdot –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    formatted = formatted.replace(/\\cdot\\cdot([^]*?)\\cdot\\cdot/g, function(match, content) {
      return `\n\n**${content.trim()}**\n\n`;
    });
    
    // 2. –í—ã–¥–µ–ª—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
    const parts = [];
    let lastIndex = 0;
    const mathPattern = /\$(.*?)\$/g;
    let match;
    
    while ((match = mathPattern.exec(formatted)) !== null) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ñ–æ—Ä–º—É–ª—ã
      if (match.index > lastIndex) {
        parts.push({
          type: 'text',
          content: formatted.substring(lastIndex, match.index)
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É
      parts.push({
        type: 'math',
        content: match[0]
      });
      
      lastIndex = match.index + match[0].length;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if (lastIndex < formatted.length) {
      parts.push({
        type: 'text',
        content: formatted.substring(lastIndex)
      });
    }
    
    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    formatted = parts.map(part => {
      if (part.type === 'math') {
        // –ó–∞–º–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
        let math = part.content;
        // –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –º–∏–Ω—É—Å—ã
        math = math.replace(/(\d+)-(\d+)/g, "$1-$2");
        return math;
      } else {
        // –í –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ \cdot\cdot –∏ \cdot
        let text = part.content;
        // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ç–µ–≥–∏ \cdot\cdot
        text = text.replace(/\\cdot\\cdot/g, "");
        // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ \cdot
        text = text.replace(/\\cdot/g, "");
        
        // –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
        text = text.replace(/^\s*‚Ä¢\s+/gm, "‚Ä¢ ");
        text = text.replace(/^\s*-\s+/gm, "‚Ä¢ ");
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        text = text.replace(/^\s{2,}‚Ä¢/gm, "  ‚Ä¢ ");
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        text = text.replace(/\\sqrt\{([^}]+)\}/g, "‚àö($1)");
        
        return text;
      }
    }).join('');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Å –∫–æ—Ä–Ω—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–µ
    formatted = formatted.replace(/(?<!\$)(\d+x\^2\s*[+-]\s*\d+x\s*[+-]\s*\d+\s*=\s*\d+)(?!\$)/g, "$$$1$$");
    formatted = formatted.replace(/(?<!\$)(–ö–æ—Ä–Ω–∏:\s*\(x\s*=\s*[^)]+\)[^)]*\(x\s*=\s*[^)]+\))(?!\$)/g, function(match) {
      return match.replace(/–ö–æ—Ä–Ω–∏:/g, "**–ö–æ—Ä–Ω–∏:**")
                 .replace(/\(x\s*=\s*([^)]+)\)/g, "$x = $1$");
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—É–ª —Å –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
    formatted = formatted.replace(/(\d+x\^2\s*[+-]\s*\d+x\s*[+-]\s*\d+)\s*=\s*(\([^)]+\)\([^)]+\))/g, 
                          "$$$1 = $2$$");
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª —Å –∫–æ—Ä–Ω—è–º–∏ –∏ –¥—Ä–æ–±—è–º–∏ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
    formatted = formatted.replace(/x\s*=\s*\\frac\{(-?\d+\s*[+-]\s*\\sqrt\{[^}]+\})\}\{[^}]+\}/g, 
                          "$x = \\frac{$1}{$2}$");
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    formatted = formatted.replace(/(---+)/g, "\n\n");
    
    // –î–æ–±–∞–≤–ª—è—é –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    // –í –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
    if (formatted.startsWith('---') || formatted.startsWith('===') || formatted.startsWith('- - -')) {
      formatted = formatted.replace(/^(?:-{3,}|={3,}|-\s*-\s*-\s*)(\n|$)/, "");
    }
    
    // –í –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
    if (formatted.endsWith('---') || formatted.endsWith('===') || formatted.endsWith('- - -')) {
      formatted = formatted.replace(/(\n|^)(?:-{3,}|={3,}|-\s*-\s*-\s*)$/, "");
    }
    
    // –í —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞ - –∑–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    formatted = formatted.replace(/\n(?:-{3,}|={3,}|-\s*-\s*-\s*)\n/g, "\n\n");
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    formatted = formatted.replace(/^(?:-{3,}|={3,}|-\s*-\s*-\s*)$/gm, "");
    
    // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–∏—Ä–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
    formatted = formatted.replace(/^--\s+/gm, "‚Ä¢ ");
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    formatted = formatted.replace(/\n{3,}/g, "\n\n"); // –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–∏ –∏–ª–∏ –±–æ–ª–µ–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–∞
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ —á–∏—Å–ª–∞–º–∏ —Å —Ç–æ—á–∫–æ–π (–¥–ª—è —Å–ø–∏—Å–∫–æ–≤)
    formatted = formatted.replace(/(\d+)\.\s+/g, "\n$1. ");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (align, array, matrix, –∏ —Ç.–¥.)
    const envPatterns = [
      /\\begin\{(align|aligned)\}([\s\S]*?)\\end\{\1\}/g, 
      /\\begin\{(array|matrix|pmatrix|bmatrix|vmatrix|cases)\}([\s\S]*?)\\end\{\1\}/g
    ];
    
    envPatterns.forEach(pattern => {
      formatted = formatted.replace(pattern, (match, env, content) => {
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–∞ \\ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let fixedContent = content.replace(/\n+/g, ' \\\\ ');
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        fixedContent = fixedContent.replace(/\s+\\\\\s+/g, ' \\\\ ');
        return `\\begin{${env}}${fixedContent}\\end{${env}}`;
      });
    });
    
    // –°–∫–ª–µ–∏–≤–∞–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã —Å–æ —Ä–∞–∑—Ä—ã–≤–∞–º–∏ —Å—Ç—Ä–æ–∫ –∏ —á–∏—Å–ª–∞–º–∏
    formatted = formatted.replace(/\$([^$]+?)\s*=\s*([^$=]+?)\s*\+\s*\n+\s*(\d+)\s*=\s*\n+\s*(\d+)\$/gs, 
                               function(match, prefix, expr, num, result) {
      return `$${prefix} = ${expr} + ${num} = ${result}$`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–¥–æ–±–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö 
    formatted = formatted.replace(/\$([^$]+?)\s*=\s*([^$=]+?)\s*\n+\s*(\d+)\$/gs, 
                               function(match, prefix, expr, num) {
      return `$${prefix} = ${expr} ${num}$`;
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ sqrt{...}
    formatted = formatted.replace(/\\sqrt\{([^}]+)\}/g, (m, inside) => {
      // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∞—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º
      if (/((?:\$[^$]*)|(?:\\begin))/.test(formatted.substring(Math.max(0, m.index - 20), m.index))) {
        return m;
      }
      return `$\\sqrt{${inside}}$`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å –¥—Ä–æ–±—è–º–∏
    formatted = formatted.replace(/\$([^$]+?)\\frac\{([^{}]+)\}\{[^{}]*\n+\s*([^{}]+)\}\s*([^$]*)\$/gs, 
                               function(match, prefix, numerator, denominator, suffix) {
      return `$${prefix}\\frac{${numerator}}{${denominator}} ${suffix}$`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö —Å —á–∏—Å–ª–∞–º–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    formatted = formatted.replace(/\$([^$\n]+)\n+\s*(\d+)([^$\n]*)\$/gs, '$$$1 $2$3$$');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –¥—Ä–æ–±—è–º–∏ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ LaTeX —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    formatted = formatted.replace(/\$([^$]*?\\frac\{[^{}]+\}\{)(\n\n)?(\d+)(\}[^$]*?)\$/g, '$$$1$3$4$$');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-—Ñ–æ—Ä–º—É–ª –≤–∏–¥–∞ $...$, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
    formatted = formatted.replace(/\$([^$\n]+)\n+([^$\n]+)\$/g, (match, first, second) => {
      return `$${first} ${second}$`;
    });
    
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    formatted = formatted.replace(/\$\n+([^$]+)\n+\$/gs, (match, formula) => {
      return `$${formula.replace(/\n+/g, ' ')}$`;
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –≤ LaTeX –∫–æ–º–∞–Ω–¥–∞—Ö
    formatted = formatted.replace(/\\(left|right)([({[])/g, '\\$1$2');
    formatted = formatted.replace(/\\(left|right)([)}\]])/g, '\\$1$2');
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏
    formatted = formatted.replace(/\\frac\s+\{([^{}]+)\}\s+\{([^{}]+)\}/g, '\\frac{$1}{$2}');
    
    // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ–æ—Ä–º—É–ª—ã (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ)
    const lines = formatted.split('\n');
    const uniqueLines = [];
    
    for (let i = 0; i < lines.length; i++) {
      let line = lines[i].trim();
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!line) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π
      if (i > 0) {
        // –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤)
        const cleanCurrent = line.replace(/\s+/g, '');
        const cleanPrev = lines[i-1].replace(/\s+/g, '');
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—á—Ç–∏ —Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
        if (cleanCurrent.length > 10 && cleanPrev.includes(cleanCurrent.substring(0, 10))) {
          continue;
        }
      }
      
      uniqueLines.push(line);
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
    formatted = uniqueLines.join('\n\n');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
    formatted = formatted.replace(/\[([^\]]*)\]/g, function(match, content) {
      // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç LaTeX-–∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
      if (/\\(?:frac|sqrt|sum|int|prod|lim|infty|partial)/i.test(content) ||
          /[=<>+\-*/_{}()]/.test(content)) {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        content = content.trim();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è LaTeX
        return '$' + content + '$';
      }
      return match; // –ò–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤–∏–¥–∞ [–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç(... –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    formatted = formatted.replace(/\[([–ê-–Ø–∞-—è–Å—ë]+)\s*\(\s*([^)]*)\s*\)/g, function(match, word, inner) {
      return `**${word}** (${inner})`;
    });
    
    // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ –±–µ–∑ –ø–∞—Ä—ã
    formatted = formatted.replace(/\[([^\]\n]*?)$/gm, "$1");
    formatted = formatted.replace(/^\s*\]\s*/gm, "");
    
    // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    formatted = formatted.replace(/^\s*\[\s*/gm, "");
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    formatted = formatted.replace(/‚Ä¢/g, "");
    formatted = formatted.replace(/\+\*/g, "");
    formatted = formatted.replace(/\*\+/g, "");
    formatted = formatted.replace(/\*–¥–≤–∞–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö–∫–æ—Ä–Ω—è\*/g, "**–¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω—è**");
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    formatted = formatted.replace(/(\w+)([–ê-–Ø–∞-—è])/g, "$1 $2"); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –∏ –ø–æ–¥–æ–±–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    formatted = formatted.replace(/(?:^|\s)[–î–î]–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç\s*\(([^)]*)\)/g, "**–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç** ($1)");
    formatted = formatted.replace(/–¥–≤–∞\s*–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö\s*–∫–æ—Ä–Ω—è/gi, "**–¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω—è**");
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ### —Å–∏–º–≤–æ–ª—ã
    formatted = formatted.replace(/###\s*$/gm, "");
    formatted = formatted.replace(/###/g, "");
    
    // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
    formatted = formatted.replace(/([–ê-–Ø–∞-—è–Å—ë])\s*[‚Ä¢*+.]\s*([–ê-–Ø–∞-—è–Å—ë])/g, "$1 $2");
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–æ—á–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π —É—Ä–∞–≤–Ω–µ–Ω–∏—è
    formatted = formatted.replace(/\$\$–ö–æ—Ä–Ω–∏:\s*\(x\s*=\s*([^)]+)\)\s*–∏\s*\(x\s*=\s*([^)]+)\)\$\$/g, 
      "**–ö–æ—Ä–Ω–∏:** $x_1 = $1$ –∏ $x_2 = $2$");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –∫–æ—Ä–Ω–µ–π —Å –¥—Ä–æ–±—è–º–∏
    formatted = formatted.replace(/\$\$x\s*=\s*(-?\d+\/\d+)\$\$/g, "$x = $1$");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    formatted = formatted.replace(/(\d+[a-zA-Z]\^2\s*[+-]\s*\d+[a-zA-Z]\s*[+-]\s*\d+)\s*=\s*(\d+)\s*\+\s*(\d+)\s*=\s*(\d+)/g, 
      "$$$1 = $2 + $3 = $4$$");
    
    // –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    // –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º—É–ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –æ–±–µ—Ä–Ω—É—Ç—ã –≤ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–ª–∞—Ä–∞
    const mathExpressions = [
      // –í—ã—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—Ä–Ω—è–º–∏ –∏ –¥—Ä–æ–±—è–º–∏
      /(\\frac\{[^{}]+\}\{[^{}]+\}|\\sqrt\{[^{}]+\})/g,
      // –í—ã—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
      /([a-zA-Z]_\{[^{}]+\}|\\pm|\\cdot|\\text\{[^{}]+\})/g,
      // –í—ã—Ä–∞–∂–µ–Ω–∏—è —Å —Å–∏–º–≤–æ–ª–∞–º–∏ +-*/= –∏ —Å–∫–æ–±–∫–∞–º–∏
      /([a-zA-Z]\s*[=<>]\s*[-+]?[0-9.]+|[-+]?[0-9.]+\s*[=<>]\s*[a-zA-Z])/g
    ];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—É–ª –≤ –∫–∞–∂–¥–æ–º –∞–±–∑–∞—Ü–µ
    const paragraphs = formatted.split("\n\n");
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–±–∑–∞—Ü
    formatted = paragraphs.map(paragraph => {
      // –ï—Å–ª–∏ –∞–±–∑–∞—Ü —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª—ã $ –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (paragraph.includes('$') || paragraph.startsWith("**")) {
        return paragraph;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ –∞–±–∑–∞—Ü–µ
      let containsMath = false;
      for (const regex of mathExpressions) {
        if (regex.test(paragraph)) {
          containsMath = true;
          break;
        }
      }
      
      // –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
      if (containsMath) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Ç–∏–ø–∞ "a = 5"
        if (/^[a-zA-Z]_?\{?[\d,]*\}?\s*=\s*[-\d./]+\s*$/.test(paragraph.trim())) {
          return '$' + paragraph.trim() + '$';
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∞ "x_1 = ..."
        if (/^[a-zA-Z]_\{?\d+\}?\s*=/.test(paragraph.trim())) {
          return '$' + paragraph.trim() + '$';
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
        if (/=/.test(paragraph) && /[+\-*/()]/.test(paragraph)) {
          return '$' + paragraph.trim() + '$';
        }
      }
      
      return paragraph;
    }).join("\n\n");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    formatted = formatted.replace(/\{([\s\S]*?)\}\s*,\s*–≥–¥–µ/g, (match, system) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
      if (system.includes('\n')) {
        // –°–æ–∑–¥–∞–µ–º environment cases –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
        let cases = system.split('\n')
          .map(line => line.trim())
          .filter(line => line)
          .map(line => line.replace(/,$/, ''))
          .join(' \\\\ ');
        return `$\\begin{cases}${cases}\\end{cases}$, –≥–¥–µ`;
      }
      return match;
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç Markdown, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    formatted = formatted.replace(/^([\w–ê-–Ø–∞-—è–Å—ë\s]+)(?=\n)/gm, function(match, title) {
      if (title.trim().length > 3 && !/\*\*/.test(title)) {
        return '**' + title.trim() + '**';
      }
      return match;
    });
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
    formatted = formatted.replace(/\$([^$]*?[a-zA-Z0-9]}?)([+\-=<>])([a-zA-Z0-9{][^$]*?)\$/g, 
      (match, before, operator, after) => {
        return `$${before} ${operator} ${after}$`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä–æ–±–∏: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º a/b –≤ \frac{a}{b}
    formatted = formatted.replace(/\$([^$]*?)(\d+)\/(\d+)([^$]*?)\$/g, function(match, before, numerator, denominator, after) {
      return '$' + before + '\\frac{' + numerator + '}{' + denominator + '}' + after + '$';
    });
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ frac
    formatted = formatted.replace(/\\frac\{([^{}]+)\}\{([^{}]+)\}/g, "\\frac{$1}{$2}");
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ LaTeX
    // –ö–æ—Ä–Ω–∏: \sqrt{...}
    formatted = formatted.replace(/\\sqrt\s+(\w+)/g, "\\sqrt{$1}");
    formatted = formatted.replace(/\\sqrt([^{])/g, "\\sqrt{$1}");
    
    // –ò–Ω–¥–µ–∫—Å—ã: x_{1,2}
    formatted = formatted.replace(/(\w+)_(\w+)/g, "$1_{$2}");
    
    // –ó–Ω–∞–∫ "–ø–ª—é—Å-–º–∏–Ω—É—Å": \pm
    formatted = formatted.replace(/\+-/g, "\\pm");
    formatted = formatted.replace(/¬±/g, "\\pm");
    
    // –ó–Ω–∞–∫ —É–º–Ω–æ–∂–µ–Ω–∏—è: \cdot
    formatted = formatted.replace(/‚ãÖ/g, "\\cdot");
    
    // –í–ê–ñ–ù–û: –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç–µ–≥–∏ \cdot –≤ —Ç–µ–∫—Å—Ç–µ –≤–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –Ω–µ–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
    const mathSegments = formatted.split(/(\$[^$]*\$)/);
    formatted = mathSegments.map((segment, index) => {
      // –ù–µ—á–µ—Ç–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã - —ç—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      if (index % 2 === 1) return segment;
      // –í –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è \cdot
      return segment.replace(/\\cdot/g, "");
    }).join('');
    
    // –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    formatted = formatted.replace(/\$\\begin\{cases\}([^$]+)\\end\{cases\}\$/g, (match, content) => {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
      let fixedContent = content.replace(/(?<![\\])\n/g, ' \\\\ ');
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ \\ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
      fixedContent = fixedContent.replace(/\\\\/g, '\\\\');
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Å—Ç—Ä–æ–∫
      fixedContent = fixedContent.replace(/\s*\\\\\s*/g, ' \\\\ ');
      return `$\\begin{cases}${fixedContent}\\end{cases}$`;
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    formatted = formatted.replace(/\\text\{([^{}]*)\}/g, "\\text{$1}");
    formatted = formatted.replace(/\(\\text\{([^{}]*)\}\)/g, "\\text{$1}");
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ LaTeX –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    formatted = formatted.replace(/\$\s+/g, "$");
    formatted = formatted.replace(/\s+\$/g, "$");
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
    formatted = formatted.replace(/\n\d+\s*(?=\n)/g, "\n");
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å –ø–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –º–µ—Ç–∫–∞–º–∏
    formatted = formatted.replace(/‚àí‚àó‚àó/g, "**");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
    formatted = formatted.replace(/\*\*([^*]+)\*\*\s*\n*\s*\$\$/g, "**$1**\n\n$$");
    formatted = formatted.replace(/\$\$\s*\n*\s*\*\*([^*]+)\*\*/g, "$$\n\n**$1**");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
    formatted = formatted.replace(/([^$\n])\n\$\$/g, "$1\n\n$$");
    formatted = formatted.replace(/\$\$\n([^$\n])/g, "$$\n\n$1");
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted = formatted.split("\n\n").map(para => {
      if (para.length > 100 && !para.includes("$") && !para.startsWith("**")) {
        return para.replace(/\.\s+/g, ".\n\n");
      }
      return para;
    }).join("\n\n");
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    formatted = formatted.replace(/\n{3,}/g, "\n\n");
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ $$ –≤ –æ–¥–∏–Ω–æ—á–Ω—ã–µ $ (–¥–ª—è inline —Ñ–æ—Ä–º—É–ª)
    formatted = formatted.replace(/\$\$([^$]+?)\$\$/g, "$$$1$$");
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º display-—Ñ–æ—Ä–º—É–ª—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–¥—É
    formatted = formatted.replace(/\$\$([^$]+?)\$\$/g, function(match, content) {
      // –ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º—É–ª–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ $$
      if (/\\begin\{/i.test(content)) {
        return match;
      }
      // –ï—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ = –∏–ª–∏ \\, –¥–µ–ª–∞–µ–º display mode
      if ((content.match(/=/g) || []).length > 1 || content.includes('\\\\')) {
        return `$$${content}$$`;
      }
      // –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º inline —Ñ–æ—Ä–º—É–ª—É
      return `$${content}$`;
    });
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ–≥–∏ \cdot
    formatted = formatted.replace(/\\cdot\\cdot/g, "");
    formatted = formatted.replace(/\\cdot/g, " ¬∑ ");
    
    console.log("–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", formatted);
    
    return formatted;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  const copyToClipboard = () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
    const plainText = response.answer
      .replace(/\$([^$]+)\$/g, '$1') // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã $ –∏–∑ LaTeX
      .replace(/\\frac\{([^{}]+)\}\{([^{}]+)\}/g, "$1/$2") // –ó–∞–º–µ–Ω—è–µ–º \frac{a}{b} –Ω–∞ a/b
      .replace(/\\sqrt\{([^{}]+)\}/g, "‚àö($1)") // –ó–∞–º–µ–Ω—è–µ–º \sqrt{a} –Ω–∞ ‚àö(a)
      .replace(/\\pm/g, "¬±") // –ó–∞–º–µ–Ω—è–µ–º \pm –Ω–∞ ¬±
      .replace(/\\cdot/g, "¬∑") // –ó–∞–º–µ–Ω—è–µ–º \cdot –Ω–∞ ¬∑
      .replace(/\\text\{([^{}]+)\}/g, "$1") // –£–±–∏—Ä–∞–µ–º \text{}
      .replace(/\\_/g, "_") // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
      .replace(/\\([[\]()~`>#+=|{}.!-])/g, "$1"); // –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    navigator.clipboard.writeText(plainText).then(
      () => {
        setCopySuccess(true)
        setTimeout(() => setCopySuccess(false), 2000)
      },
      (err) => {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ', err)
      }
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
  const toggleThinking = () => {
    setShowThinking(!showThinking)
  }

  useEffect(() => {
    try {
      const urlParams = new URLSearchParams(window.location.search)
      const compressedData = urlParams.get("d")

      if (compressedData) {
        const decompressedData = LZString.decompressFromEncodedURIComponent(compressedData)

        if (decompressedData) {
          const parsedData = JSON.parse(decompressedData)
          console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", parsedData)
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ thinking
          let thinkingContent = '';
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          let answerText = '';
          
          // 1. –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          if (parsedData.hasMath && parsedData.mathContent) {
            console.log("–ò—Å–ø–æ–ª—å–∑—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç");
            answerText = formatMathContent(removeEscapes(parsedData.mathContent));
          }
          // 2. –ò–Ω–∞—á–µ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          else if (parsedData.originalAnswer) {
            console.log("–ò—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç");
            const extracted = extractThinking(removeEscapes(parsedData.originalAnswer));
            thinkingContent = extracted.content;
            answerText = formatMathContent(extracted.textWithoutThinking);
          } 
          // 3. –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º data
          else {
            console.log("–ò—Å–ø–æ–ª—å–∑—É—é data");
            const data = removeEscapes(parsedData.data);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
            if (data.includes("–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")) {
              answerText = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.";
            } else {
              const extracted = extractThinking(data);
              thinkingContent = extracted.content;
              answerText = formatMathContent(extracted.textWithoutThinking);
            }
          }
          
          console.log("–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç:", answerText);
          
          setResponse({
            answer: answerText,
            thinking: thinkingContent,
            reasoningSteps: parsedData.r?.map((step) => removeEscapes(step)) || [],
            citations: parsedData.c || [],
            reasoningMode: parsedData.reasoningMode || false
          })
        } else {
          console.error("Failed to decompress data")
        }
      }
    } catch (error) {
      console.error("Error parsing response:", error)
    }
    setLoading(false)

    if (webApp) {
      webApp.ready()
      document.documentElement.style.setProperty("--tg-theme-bg-color", webApp.backgroundColor)
      document.documentElement.style.setProperty("--tg-theme-text-color", webApp.textColor)
      document.documentElement.style.setProperty("--tg-theme-button-color", webApp.buttonColor)
      document.documentElement.style.setProperty("--tg-theme-button-text-color", webApp.buttonTextColor)
    }
  }, [webApp])

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  if (!response) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center text-gray-600">No response data available</div>
      </div>
    )
  }

  return (
    <div
      className="min-h-screen"
      style={{
        backgroundColor: "var(--tg-theme-bg-color)",
        color: "var(--tg-theme-text-color)",
      }}
    >
      <div className="max-w-4xl mx-auto">
        <div className="bg-white/90 dark:bg-gray-800 shadow-lg p-6 fade-in">
          <div className="mb-6">
            <div className="text-gray-700 dark:text-gray-300 markdown-content">
              <ReactMarkdown
                remarkPlugins={[remarkMath]}
                rehypePlugins={[rehypeKatex]}
                components={{
                  code({ inline, className, children, ...props }) {
                    const match = /language-(\w+)/.exec(className || "")
                    const language = match ? match[1] : ""

                    return !inline ? (
                      <SyntaxHighlighter
                        style={vscDarkPlus}
                        language={language}
                        PreTag="div"
                        className="rounded-md"
                        {...props}
                      >
                        {String(children).replace(/\n$/, "")}
                      </SyntaxHighlighter>
                    ) : (
                      <code className={className} {...props}>
                        {children}
                      </code>
                    )
                  },
                  a({ href, children, ...props }) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
                    const isSourceLink = /\[\d+\]/.test(String(children));
                    
                    return (
                      <a
                        href={href}
                        target="_blank"
                        rel="noopener noreferrer"
                        className={`inline-link ${isSourceLink ? 'source-link' : ''}`}
                        style={{
                          color: "black",
                          textDecoration: "underline",
                          fontWeight: isSourceLink ? "bold" : "normal"
                        }}
                        {...props}
                      >
                        {children}
                      </a>
                    );
                  }
                }}
              >
                {response.answer}
              </ReactMarkdown>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="mb-4 mt-2 flex flex-col gap-2">
            <button
              onClick={copyToClipboard}
              className="copy-button"
              style={{
                backgroundColor: "#2196F3",
                color: "white",
                padding: "10px 16px",
                borderRadius: "4px",
                border: "none",
                cursor: "pointer",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "16px",
                fontWeight: "500",
                width: "100%",
                textAlign: "center"
              }}
            >
              {copySuccess ? "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ" : "Copy / –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"}
            </button>
            
            {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π */}
            {response.reasoningMode && (response.thinking || response.reasoningSteps?.length > 0) && (
              <button
                onClick={toggleThinking}
                className="toggle-thinking-button"
                style={{
                  backgroundColor: "#4CAF50",
                  color: "white",
                  padding: "10px 16px",
                  borderRadius: "4px",
                  border: "none",
                  cursor: "pointer",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  fontSize: "16px",
                  fontWeight: "500",
                  width: "100%",
                  textAlign: "center"
                }}
              >
                {showThinking ? "üß† –°–∫—Ä—ã—Ç—å —Ö–æ–¥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π" : "üß† –ü–æ–∫–∞–∑–∞—Ç—å —Ö–æ–¥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"}
              </button>
            )}
          </div>

          {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–ª–æ–∫ thinking –µ—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω –∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ */}
          {response.reasoningMode && response.thinking && showThinking && (
            <div className="mb-6 bg-gray-100 p-4 rounded-lg">
              <h2 className="text-lg font-semibold mb-2">üß† –•–æ–¥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π:</h2>
              <div className="text-gray-700">
                {response.thinking.split('\n').map((paragraph, idx) => (
                  <p key={idx} className="mb-2">{paragraph}</p>
                ))}
              </div>
            </div>
          )}

          {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —à–∞–≥–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω */}
          {response.reasoningMode && response.reasoningSteps?.length > 0 && showThinking && (
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">üß† Reasoning Steps:</h2>
              <ul className="list-none">
                {response.reasoningSteps.map((step, index) => (
                  <li key={index} className="reasoning-step">
                    <span className="mr-2">üîπ</span>
                    <span className="text-gray-700 dark:text-gray-300">{step}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {response.citations?.length > 0 && (
            <div>
              <h2 style={{
                color: 'black'
              }} className="text-lg font-semibold mb-2">üìö Sources:</h2>
              <ul className="list-none">
                {response.citations.map((citation, index) => (
                  <li key={index} className="mb-2">
                    <a
                      href={citation}
                      target="_blank"
                      rel="noopener noreferrer"
                      style={{ 
                        color: "black",
                        display: "block",
                        padding: "4px 0",
                        textDecoration: "underline",
                        whiteSpace: "nowrap",
                        overflow: "hidden",
                        textOverflow: "ellipsis",
                        maxWidth: "100%",
                        wordBreak: "break-all"
                      }}
                      className="citation-link hover:opacity-80"
                      title={citation}
                    >
                      {index + 1}. {formatUrl(citation)}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

function App() {
  return <ResponseViewer />
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL
function formatUrl(url) {
  try {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç URL –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
    const urlObj = new URL(url);
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª, www –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω –∏ –ø—É—Ç—å
    let domain = urlObj.hostname.replace(/^www\./, '');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—É—Ç—å
    let path = urlObj.pathname;
    if (path.length > 20) {
      path = path.substring(0, 15) + '...';
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ URL
    return `${domain}${path === '/' ? '' : path}`;
  } catch (e) {
    // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ
    if (url.length > 40) {
      return url.substring(0, 37) + '...';
    }
    return url;
  }
}

export default App

